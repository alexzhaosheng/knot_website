/* Use Object Selector to bind to "bookStoreModel" in Global scope */
/bookStoreModel{
    /*
        Update the current selected category and book whenever the  any of the $hash.category,
        $hash.book and /bookStoreModel.categories is changed.
    */
    selected: ($hash.category & $hash.book & /bookStoreModel.categories) > @/bookStoreModel.getSelected;
}


body{
    dataContext: /bookStoreModel;
}
#bookStoreHTML .navMenu>ul{
/* set the Data Context to selected.category */
    foreach: categories;

    -> >li{
        text: name;
        @click: @{
                /* set the hash variant "category" to the id of current category to show it */
                Knot.setKnotVariant("$hash.category", this.id);
                /* set current book to null when current category is changed */
                Knot.setKnotVariant("$hash.book", null);
            };
        class: (/bookStoreModel.selected.category && *LEFT)>{return value[0]===value[1]?"+selected":"-selected";}
    }
}

/* this is the template of category list */
#booksList>ul{

    dataContext: category;

    foreach: items;

    /* this is the template of category items in menu */
    -> >li{
        @click: @{
            Knot.setKnotVariant("$hash.category", window.bookStoreModel.selected.category.id);
            /* set the hash variant "book" to the id of current book to show it */
            Knot.setKnotVariant("$hash.book", this.id);
        };

        -> img{
            src: cover
        };
        -> div{
            text: name
        };
    }
}

#bookDetails>div{
    /* set the Data Context to selected.book */
    dataContext: book;

    -> .title{
        text: name
    };

    -> img{
        src: cover
    };

    -> .intro{
        innerHTML: intro
    };

    -> button{
        @click: @{ Knot.setKnotVariant("$hash.book", null); };
    }
}


#contentContainer{
    /*
         Show current content by "content" template binding.
         It is the templateSelector who decide which template is to use

         And yes, you can use embedded functions anywhere that requires function.
         Note the parameter of the embedded function is always "value". If you need
         the other parameters than the 1st, either put them in the Javascript code
         or use "arguments".
    */
    content[templateSelector:@{
                return !value? null:
                    (value.book?"bookDetailsTemplate":"bookListTemplate");
            }]
        : selected
}
