body{
    dataContext:/debuggerModel;
}

#tabPage{
    =>.page-headerArea>.header:first-child{
        @click:@{this.showLogViewer = false;}
    };
    =>.page-headerArea>.header:last-child{
        @click:@{this.showLogViewer = true;}
    };
    =>.page-headerArea>.header:last-child>span{
        className:highestLogLevel
    };

    =>.page-headerArea>.header:first-child, .pageContent:first-child{
        class:showLogViewer>{return value?"-selected":"+selected";}
    };
    =>.page-headerArea>.header:last-child, .page-contentArea>.pageContent:last-child{
        class:showLogViewer>{return !value?"-selected":"+selected";}
    };
}

#domTree{
    foreach: domTreeNodes
}

#domTree>li {
    =>.expander>i{
        @click:@{this.isExpanded = !this.isExpanded;};
        class:isExpanded>{return value?"+fa-minus-circle -fa-plus-circle -iconButtonChecked":"-fa-minus-circle +fa-plus-circle +iconButtonChecked";}
    };

    =>.nodeTitle{
        text: description;
        class:noKnotSetting>{return value?"+emptyNode":"";}
    };

    =>.highlightMark{
        style.display:isHighlighted>{return value?"inline-block":"none";}
    };

    =>.locateElementButton{
        @click:@/debuggerModel.onLocateElement
    };

    =>.checkDataContextButton{
        style.display:dataContext>{return value?"inline-block":"none"};
        @click:@/debuggerModel.onShowDataContext
    };

    =>.knotList{
        foreach :options;
        style.display:options>{return (value&&value.length>0)?"block":"none";}
    };

    =>.nodeChildren{
        foreach[template:domTreeItem]: childrenInfo;
        style.display:childrenInfo>{return (value&&value.length>0)?"block":"none";}
    };

    =>.collapsibleContent{
        style.display : isExpanded>{return value?"block":"none";}
    };
}


.knotList>li{
    =>.knotOption{
        text:description;
        title:description
    };

    =>.knotValueDirection, .knotValue, .knotValueDetail{
        style.display:latestValueInfo>{return value?"inline-block":"none";};
    };

    =>.knotValueDirection{
        class:latestValueInfo.isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
    };

    =>.knotValue{
        text[@set:@/debuggerModel.onKnotValueChanged]: latestValueInfo.value >{return JSON.stringify(value);};
        title: latestValueInfo.value >{return "Latest value:("+ (this.latestValueInfo.isFromLeftToRight?"output":"input") +")\n" + JSON.stringify(value);}
    };

    =>.knotValueDetail{
        @click:@/debuggerModel.onShowKnotDetail
    };

    =>.errorStatusIndicator{
        style.display:errorStatus>{return value?"inline-block":"none";};
        title:errorStatus>{return value?"Error message: "+ value.message:"";};
    };
}


/* knot change log*/
.knotChangeLog{
    foreach: knotChangeLog;

    =>.id{
        text: id
    };
    =>.nodeTitle{
        text: nodeDescription;
        title: nodeDescription
    };
    => .knotOption{
        text: knotOption.description;
        title: knotOption.description;
    };
    =>  .knotValueDirection{
        class:isFromLeftToRight>{return value?"+fa-long-arrow-right -fa-long-arrow-left":"-fa-long-arrow-right +fa-long-arrow-left";}
    };
    => .knotValue{
        text: value>{return JSON.stringify(value);};
        title: value>{return JSON.stringify(value);};
    };
    => .knotValueDetail{
        @click:@/debuggerModel.onShowKnotValueLogDetail
    };
}

/*knot change log expander */
.treeContainer{
    class: isKnotLogExpanded>{return value?"-expander-top-collapsed +expander-top-expanded":"+expander-top-collapsed -expander-top-expanded";}
}
#knotChangeLogExpander{
    class: isKnotLogExpanded>{return value?"-expander-bottom-collapsed +expander-bottom-expanded":"+expander-bottom-collapsed -expander-bottom-expanded";};

    =>.expanderButton>i{
        class: isKnotLogExpanded>{return value?"+fa-chevron-circle-down -fa-chevron-circle-up":"-fa-chevron-circle-down +fa-chevron-circle-up";}
    };
    =>.expanderButton{
        @click: @{this.isKnotLogExpanded = !this.isKnotLogExpanded;};
    };

    =>.clearLogButton{
        @click: @/debuggerModel.onClearLogs;
    }
}




 /* Log */

#logContainer{
    foreach[template:logTemplate]: logs
}

.logTemplate{
    style.backgroundColor: level>{
        switch(value){
            case "Info":
                return "transparent";
            case "Warning":
                return "#b58900";
            case "Error":
                return "#dc322f";
        }
    };

    => .level{
        text:level
    };

    => .time{
        text:time>{
            return value.getHours() + ":" + value.getMinutes() + ":" + value.getSeconds() +
                    " " + value.getMilliseconds();
        }
    };

    => .message{
        text: message
    };

    => .exception{
        text: exception>{return value.toString();}
    };
}
